"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stopServer = exports.startServer = exports.ORIGIN = exports.PROTOCOL = exports.HOST = exports.PORT = void 0;
const express_1 = __importDefault(require("express"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const http_1 = __importDefault(require("http"));
const getDocument_1 = __importDefault(require("./content/getDocument"));
const logger_1 = __importDefault(require("../helpers/logger"));
const page_1 = __importDefault(require("./content/page"));
const app = express_1.default();
const fetchKitty = async () => {
    try {
        const catPicResult = await node_fetch_1.default('https://api.thecatapi.com/v1/images/search');
        const catPicList = await catPicResult.json();
        const [catPicData] = catPicList;
        if (!catPicData.url) {
            throw Error('no url');
        }
        return catPicData;
    }
    catch (error) {
        return {
            caption: 'Roscoe & Chico',
            height: 1500,
            url: 'https://s3.amazonaws.com/foo.software/images/chico-roscoe.jpg',
            width: 2000,
        };
    }
};
const description = `Cry louder at ipsum reflection leave dead animals as gifts bite nose of your human chew the plant no, you can't close the door lorem.`;
const title = `Cry louder at ipsum reflection leave dead animals as gifts lorem`;
const h1 = 'Hello world';
app.get('/', async (_req, res) => {
    const catPicData = await fetchKitty();
    return res.send(getDocument_1.default({
        content: page_1.default({
            catPicData,
            h1,
        }),
        description,
        title,
    }));
});
app.get('/short-description', async (_req, res) => {
    const catPicData = await fetchKitty();
    return res.send(getDocument_1.default({
        content: page_1.default({
            catPicData,
            h1,
        }),
        description: 'ipsum lorem',
        title,
    }));
});
app.get('/short-title', async (_req, res) => {
    const catPicData = await fetchKitty();
    return res.send(getDocument_1.default({
        content: page_1.default({
            catPicData,
            h1,
        }),
        description,
        title: 'ipsum lorem',
    }));
});
app.get('/no-h1', async (_req, res) => {
    const catPicData = await fetchKitty();
    return res.send(getDocument_1.default({
        content: page_1.default({
            catPicData,
        }),
        description,
        title,
    }));
});
app.get('/missing-keywords', async (_req, res) => {
    const catPicData = await fetchKitty();
    return res.send(getDocument_1.default({
        content: page_1.default({
            catPicData,
            h1,
        }),
        description: 'no keywords in this description no keywords in this description no keywords in this description no keywords in this description',
        title,
    }));
});
app.get('/poor-tag-structure', (_req, res) => {
    return res.send(getDocument_1.default({
        content: page_1.default({
            h1,
        }),
        description,
        title,
    }));
});
app.get('/no-text', async (_req, res) => {
    const catPicData = await fetchKitty();
    return res.send(getDocument_1.default({
        content: page_1.default({
            catPicData,
            h1,
            content: '<h2>ipsum lorem</h2><p>ipsum lorem</p>',
        }),
        description,
        title,
    }));
});
app.get('/fail-all', async (_req, res) => {
    const catPicData = await fetchKitty();
    return res.send(getDocument_1.default({
        content: page_1.default({
            catPicData,
            h1,
            content: '<span>ipsum lorem</span>',
        }),
        description: 'hello world',
        title: 'short title',
    }));
});
const server = http_1.default.createServer(app);
exports.PORT = process.env.BINOCULARS_INTEGRATION_SERVER_PORT || 3000;
exports.HOST = process.env.BINOCULARS_INTEGRATION_SERVER_DOMAIN || 'localhost';
exports.PROTOCOL = process.env.BINOCULARS_INTEGRATION_SERVER_PROTOCOL || 'http';
exports.ORIGIN = `${exports.PROTOCOL}://${exports.HOST}:${exports.PORT}`;
exports.startServer = () => new Promise((resolve) => server.listen(exports.PORT, () => {
    logger_1.default.info(`listening on port ${exports.PORT}`);
    resolve();
}));
exports.stopServer = () => new Promise((resolve) => server.close(() => {
    logger_1.default.info('server stopped');
    resolve();
}));
exports.default = server;
//# sourceMappingURL=index.js.map