#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const camelcase_1 = __importDefault(require("camelcase"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const getDocumentationLinks_1 = __importDefault(require("../helpers/getDocumentationLinks"));
const getDocumentationElements_1 = __importDefault(require("../helpers/getDocumentationElements"));
const audits = __importStar(require("../config/audits/lighthouse"));
const categories = __importStar(require("../config/categories"));
const groups = __importStar(require("../config/groups"));
const definitionPath = path_1.default.resolve('src/definitions');
const definitionIndexPath = path_1.default.resolve('src/definitions/index.ts');
const glossaryPath = path_1.default.resolve('src/glossary.ts');
const generateDefinitions = async (Collection) => {
    const urls = [];
    for (const key in Collection) {
        const { description } = Collection[key]();
        const descriptionLinks = getDocumentationLinks_1.default(description);
        if (descriptionLinks.length) {
            urls.push(...descriptionLinks);
        }
    }
    for (const url of urls) {
        const parts = url.split('/');
        const name = parts[parts.length - 2];
        const elements = await getDocumentationElements_1.default(url);
        let content = `export default [`;
        for (const element of elements) {
            content += `\n  \`${element}\`,`;
        }
        content += '\n];\n';
        fs_1.default.writeFileSync(`${definitionPath}/${name}.ts`, content);
        let exportContent = fs_1.default.readFileSync(definitionIndexPath, 'utf8');
        exportContent = exportContent.replace('// replace me', `export { default as ${camelcase_1.default(name)} } from './${name}';\n// replace me`);
        fs_1.default.writeFileSync(definitionIndexPath, exportContent);
        let glossaryContent = fs_1.default.readFileSync(glossaryPath, 'utf8');
        glossaryContent = glossaryContent.replace('// replace me', `'${name}',\n  // replace me`);
        fs_1.default.writeFileSync(glossaryPath, glossaryContent);
    }
};
(async () => {
    await generateDefinitions(audits);
    await generateDefinitions(categories);
    await generateDefinitions(groups);
})();
//# sourceMappingURL=generateDefinitions.js.map