"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIStrings = void 0;
const lighthouse_1 = require("lighthouse");
const MIN_KEYWORD_COUNT = 2;
const MIN_INSTANCE_COUNT = 2;
const ignoreWords = [
    'a',
    'an',
    'and',
    'as',
    'at',
    'by',
    'can',
    'cant',
    'for',
    'from',
    'in',
    'in',
    'if',
    'it',
    'let',
    'of',
    'on',
    'out',
    'the',
    'their',
    'them',
    'there',
    'theyre',
    'this',
    'that',
    'to',
    'us',
    'was',
    'we',
    'yall',
    'you',
];
const ignoreWordsMap = ignoreWords.reduce((accumulator, current) => ({
    ...accumulator,
    [current]: current,
}), {});
const getOnlyLettersAndSpaces = (text) => text
    .replace(/[^a-z A-Z]/gi, '')
    .replace(/  +/g, ' ')
    .toLowerCase();
exports.UIStrings = {
    title: 'Has keyword content',
    failureTitle: `Keywords of at least ${MIN_KEYWORD_COUNT} words do not exist in the title, description and exist at least ${MIN_INSTANCE_COUNT} times in the content of the page`,
    description: `Keywords present in the title, description and content of a page help narrow targeted search result ranking. At least ${MIN_KEYWORD_COUNT} words should exist in the title, description and exist at least ${MIN_INSTANCE_COUNT} times in the content of the page`,
};
class Keywords extends lighthouse_1.Audit {
    static get meta() {
        return {
            id: 'keywords',
            title: exports.UIStrings.title,
            failureTitle: exports.UIStrings.failureTitle,
            description: exports.UIStrings.description,
            requiredArtifacts: ['Elements', 'MetaElements', 'TitleElement'],
        };
    }
    static audit(artifacts) {
        var _a;
        const [body] = ((_a = artifacts.Elements) === null || _a === void 0 ? void 0 : _a.body) || [];
        const { MetaElements, TitleElement } = artifacts;
        if (!body || !body.text) {
            return {
                score: 0,
            };
        }
        if (!TitleElement || !TitleElement.text) {
            return {
                score: 0,
            };
        }
        const metaDescription = (MetaElements || []).find((meta) => meta.name === 'description');
        if (!metaDescription || !metaDescription.content) {
            return {
                score: 0,
            };
        }
        const content = body.text;
        const description = metaDescription.content;
        const title = TitleElement.text;
        const contentOnlyLetters = getOnlyLettersAndSpaces(content);
        const descriptionOnlyLetters = getOnlyLettersAndSpaces(description);
        const titleOnlyLetters = getOnlyLettersAndSpaces(title);
        const words = titleOnlyLetters
            .split(' ')
            .reduce((accumulator, word) => {
            if (ignoreWordsMap[word]) {
                return accumulator;
            }
            return [
                ...accumulator,
                {
                    word,
                    descriptionMatches: (descriptionOnlyLetters.match(new RegExp(word, 'g')) || []).length,
                    contentMatches: (contentOnlyLetters.match(new RegExp(word, 'g')) || []).length,
                },
            ];
        }, []);
        let keywordCount = 0;
        for (const word of words) {
            if (word.descriptionMatches &&
                word.contentMatches >= MIN_INSTANCE_COUNT) {
                keywordCount++;
            }
            if (keywordCount >= MIN_KEYWORD_COUNT) {
                return {
                    score: 1,
                };
            }
        }
        return {
            score: 0,
        };
    }
}
exports.default = Keywords;
//# sourceMappingURL=keywords.js.map