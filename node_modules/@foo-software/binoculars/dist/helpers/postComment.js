"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(require("node-fetch"));
exports.default = async ({ commentAccessToken, commentUrl, results, }) => {
    let markdown = '\n<table><tr><th colspan="3">Binoculars Results</th></tr>';
    const reportHeader = !results[0].report ? '' : '<th>report</th>';
    markdown += `<tr><th>url</th>${reportHeader}<th>score</th></tr>`;
    results.forEach((result) => {
        const urlCell = `<td>${result.url}</td>`;
        const scoreCell = `<td><code>${result.result.categories.binocularsSeo.score * 100}</code></td>`;
        const reportCell = !result.report
            ? ''
            : `<td><a href="${result.report}">report</a></td>`;
        markdown += `<tr>${urlCell}${reportCell}${scoreCell}</tr>`;
    });
    markdown += `</table>\n\n`;
    const commentIdentifier = '<!-- generated by binoculars -->';
    markdown += commentIdentifier;
    let existingComment;
    const existingCommentsResult = await node_fetch_1.default(commentUrl, {
        method: 'get',
        headers: {
            'content-type': 'application/json',
            authorization: `token ${commentAccessToken}`,
        },
    });
    const existingCommentsJsonResult = await existingCommentsResult.json();
    if (Array.isArray(existingCommentsJsonResult) &&
        existingCommentsJsonResult.length) {
        existingComment = existingCommentsJsonResult.find((current) => current.body.includes(commentIdentifier));
    }
    const shouldUpdate = existingComment && existingComment.id;
    const url = !shouldUpdate
        ? commentUrl
        : `${commentUrl}/${existingComment.id}`;
    const result = await node_fetch_1.default(url, {
        method: !shouldUpdate ? 'post' : 'put',
        body: JSON.stringify({
            ...(shouldUpdate
                ? {}
                : {
                    event: 'COMMENT',
                }),
            body: markdown,
        }),
        headers: {
            'content-type': 'application/json',
            authorization: `token ${commentAccessToken}`,
        },
    });
    const jsonResult = await result.json();
    if (!jsonResult.id) {
        throw Error(jsonResult.message || 'unknown error');
    }
};
//# sourceMappingURL=postComment.js.map