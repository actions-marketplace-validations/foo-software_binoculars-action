"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const puppeteer_1 = __importDefault(require("puppeteer"));
const logger_1 = __importDefault(require("./logger"));
const TIMEOUT = 10000;
exports.default = async (url) => {
    let browser;
    try {
        browser = await puppeteer_1.default.launch({
            args: ['--no-sandbox'],
            ...(process.env.LOG_LEVEL !== 'debug' ? {} : { dumpio: true }),
        });
        logger_1.default.info(`browser launched for ${url} ✔️`);
        const page = await browser.newPage();
        page.setDefaultTimeout(TIMEOUT);
        page.setDefaultNavigationTimeout(TIMEOUT);
        await page.goto(`${url}`);
        logger_1.default.info('page fetch complete ✔️');
        const dataString = await page.evaluate(async () => {
            const content = document.querySelector('.w-post-content');
            const title = document.querySelector('title');
            const elements = [];
            if (content) {
                let isPreviousElementResourceHeader = false;
                Array.from(content.children).forEach((element) => {
                    const tagName = element.tagName.toLowerCase();
                    if (!element.classList.contains('w-article-header') &&
                        !element.classList.contains('w-aside') &&
                        !element.classList.contains('w-aside') &&
                        !element.classList.contains('w-chips') &&
                        !element.classList.contains('w-post-github-link') &&
                        tagName !== 'web-feedback') {
                        let html = `${element.innerHTML}`;
                        if (isPreviousElementResourceHeader) {
                            const resourceItem = `<li><a href="${window.location.href}" rel="noopener">${title === null || title === void 0 ? void 0 : title.innerText}</a></li>`;
                            html = `${html}${resourceItem}`;
                        }
                        elements.push(`<${tagName}>${html}</${tagName}>`);
                        if (element.id === 'resources') {
                            isPreviousElementResourceHeader = true;
                        }
                        else {
                            isPreviousElementResourceHeader = false;
                        }
                    }
                });
            }
            return JSON.stringify({
                elements,
            });
        });
        const pageData = JSON.parse(dataString);
        logger_1.default.info('page evaluation complete ✔️');
        await browser.close();
        return pageData.elements;
    }
    catch (error) {
        if (browser) {
            await browser.close();
        }
        throw error;
    }
};
//# sourceMappingURL=getDocumentationElements.js.map